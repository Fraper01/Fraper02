# Crear un Sistente de IA para Aprender el manejo de las Lib rer칤as de Python
import requests
from bs4 import BeautifulSoup   
import pandas as pd
import re   
import os
import ollama
from os import system

class ExtraerInformacionWeb:  
    def __init__(self):
        self.url = None
        self.resumen = ""
        self.modelo = "llama3"
        self.libreria = None
        self.tema = None

    def limpiar_terminal(self):
        # limpiar la terminal
        os.system("cls" if os.name == "nt" else "clear")
    
    def obtener_Informacion(self, alibreria, atema):
        #Le pedimos a la IA la informaci칩n de la librer칤a y el tema
        prompt = f"""
                    **Instrucciones:**
                    Act칰a como un experto asistente en programaci칩n de Python. Tu objetivo es proporcionar informaci칩n detallada y precisa sobre una **librer칤a de Python** espec칤fica y un **tema** concreto dentro de esa librer칤a.
                    **Par치metros:**
                    * **Librer칤a:** {alibreria}
                    * **Tema:** {atema}
                    **Formato de la respuesta:**
                    Proporciona la informaci칩n solicitada de la siguiente manera, asegur치ndote de que est칠 bien agrupada y sea f치cil de entender:
                    1.  **Definici칩n del Tema:**
                        * Comienza con una definici칩n clara y concisa del **tema** especificado dentro de la **librer칤a**. Explica qu칠 es, cu치l es su prop칩sito principal y cu치ndo se utiliza.
                        * utiliza un nivel de detalle avanzado, pero aseg칰rate de que sea comprensible para alguien con conocimientos intermedios en programaci칩n.
                        * Si es necesario, proporciona un contexto adicional sobre la **librer칤a** en general para ayudar a entender mejor el **tema**.
                    2.  **Conceptos Clave (si aplica):**
                        * Si el tema involucra conceptos clave o relacionados, expl칤calos brevemente para proporcionar contexto.
                    3.  **Ejemplos de Uso:**
                        * Incluye **ejemplos de c칩digo en Python** que ilustren c칩mo se utiliza el **tema** dentro de la **librer칤a**. Los ejemplos deben ser sencillos, claros y demostrar casos de uso comunes. Si es posible, incluye la salida esperada de los ejemplos.
                        * Aseg칰rate de que los ejemplos sean funcionales y est칠n bien comentados para facilitar la comprensi칩n.
                        * Si el tema tiene m칰ltiples formas de uso, proporciona ejemplos variados para mostrar su versatilidad.
                        * Utiliza un estilo de codificaci칩n limpio y legible, siguiendo las mejores pr치cticas de Python.
                    4.  **Consideraciones y Notas Importantes (opcional):**
                        * Si hay consideraciones importantes a tener en cuenta al usar este tema (como mejores pr치cticas, posibles errores comunes, limitaciones, etc.), incl칰yelas en una secci칩n separada.
                    5.  **Recursos Adicionales (opcional):**
                        * Idioma: Responde en espa침ol.
                        * Si es relevante, proporciona enlaces a la documentaci칩n oficial de la **librer칤a** o recursos adicionales donde los usuarios puedan profundizar m치s en el tema.
                """
        try:
            self.limpiar_terminal()
            print("游뱄 IA: (Buscando Informaci칩n Solicitada. Por Favor Espere unos minutos...)")
            # Llamar al modelo de lenguaje para obtener la informaci칩n
            respuesta = ollama.chat(model=self.modelo, messages=
            [
                {
                    'role':'user',
                    'content':prompt
                }
            ])
            self.resumen = respuesta['message']['content'].strip()
            return self.resumen
        except Exception as e:
            print(f"Error al obtener la informaci칩n: {e}")
            return None 
    def mostrar_respuesta_ia(self, texto):
        self.limpiar_terminal()
        if texto.strip() == "":
            print("游뱄 IA: (sin respuesta)")
        else:
            respuesta_estilizada = f"\033[1;96m游뱄 IA: {texto}\033[0m"
            print(respuesta_estilizada)
        print("\n--- Fin de la informaci칩n ---")
        input("Pulse Enter para continuar...")

def mostrar_definicion(alibreria, atema)-> None:
    iExtraer = ExtraerInformacionWeb()
    iExtraer.obtener_Informacion(alibreria=alibreria, atema=atema)
    iExtraer.mostrar_respuesta_ia(iExtraer.resumen)

def mostrar_pandas()-> None:
    #Muestra el men칰 de Pandas."""
    system('cls')
    titulo = "Librerias de Python Pandas"
    ancho_linea = 40
    print("Elaborado por: Monica & Francisco")
    print("-" * ancho_linea)
    print(titulo.center(ancho_linea))  
    print("1. Definici칩n de Pandas")
    print("2. Que es un DataFrame") 
    print("3. Que es una Series")
    print("4. Crear y visualicar DataFrame")
    print("5. Ejemplos de uso")
    print("9. Regresar al men칰 principal")
    print("-" * ancho_linea)

def mostrar_menu()-> None:
    #Muestra el men칰 de General."""
    #Limpia la consola y muestra el men칰 de opciones. se encuentra en la libreria os
    system('cls')
    titulo = "Librerias de Python"
    titulo2= "para la Ciencia de Datos"
    ancho_linea = 40
    print("Elaborado por: Monica & Francisco")
    print("-" * ancho_linea)
    print(titulo.center(ancho_linea))  
    print(titulo2.center(ancho_linea))  
    print("1. Pandas")
    print("2. NumPy")
    print("3. Matplotlib")
    print("4. Scikit-learn")
    print("9. Salir")
    print("-" * ancho_linea)


def menu_pandas()-> None:
    #Muestra el men칰 de opciones de la librer칤a Pandas
    # Bucle Menu Pandas.
    while True:
        # Manejo de excepciones para evitar errores de entrada.
        # Se utiliza para asegurarse de que el usuario introduce un valor v치lido.
        try:
            mostrar_pandas()
            opcion = input("Selecciona una opci칩n: ")
            if opcion == '1':
                mostrar_definicion(alibreria="Pandas", atema="Definici칩n de Pandas")
            elif opcion == '2':
                mostrar_definicion(alibreria="Pandas", atema="DataFrame")
            elif opcion == '3':
                mostrar_definicion(alibreria="Pandas", atema="Series")
            elif opcion == '4':
                mostrar_definicion(alibreria="Pandas", atema="Crear y visualizar DataFrame")
            elif opcion == '5':
                mostrar_definicion(alibreria="Pandas", atema="Ejemplos de uso")
            elif opcion == '9':
                break
            else:
                print("Opci칩n inv치lida. Por favor, intenta de nuevo.")
        except ValueError:
            print("Por favor, introduce una opci칩n valida.")

if __name__ == "__main__":
    # Bucle principal del programa.
    # Se utiliza para mostrar el men칰 y ejecutar las opciones seleccionadas por el usuario. 
    while True:
        # Manejo de excepciones para evitar errores de entrada.
        # Se utiliza para asegurarse de que el usuario introduce un valor v치lido.
        try:
            mostrar_menu()
            opcion = input("Selecciona una opci칩n: ")
            if opcion == '1':
                menu_pandas()
            elif opcion == '2':
                None
            elif opcion == '3':
                None
            elif opcion == '4':
                None
            elif opcion == '9':
                print("춰Despegando hacia la pr칩xima aventura!")
                break
            else:
                print("Opci칩n inv치lida. Por favor, intenta de nuevo.")
        except ValueError:
            print("Por favor, introduce una opci칩n valida.")
